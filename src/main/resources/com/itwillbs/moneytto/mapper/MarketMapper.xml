<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itwillbs.moneytto.mapper.MarketMapper">

<!-- 등록될 상품코드조회 -->
	<select id="selectItem" resultType="String" >
		SELECT CONCAT('market', LPAD(CAST(SUBSTRING(item_code, 7) AS UNSIGNED) + 1, 4, '0')) 
		FROM item
		ORDER BY item_code DESC
		LIMIT 1;
	</select>
	
<!-- 상품등록 -->
	<insert id="insertItem">
    INSERT INTO item 
	    VALUES (
	        #{item_code},
	        #{id},
	        #{item_subject},
	        #{item_content},
	        #{item_price},
	        IFNULL((SELECT CASE WHEN #{item_price_offer} = 'on' THEN 'Y' ELSE 'N' END), 'N'),
	        #{item_tag},
	        #{item_category},
	        '판매중',
	        NOW()
	    )
	</insert>

<!-- 상품이미지등록 -->	
	<insert id="saveImage">
	
	INSERT INTO images
		VALUES (
			#{image_code}
			,#{item_code}
			,#{image_name}
		)

	</insert>
	
	
	
	<!-- 채팅관련 -->
	<select id="getItem" resultType="hashmap">
	 	SELECT *
	 		 FROM market_chat_rooms
	  			WHERE item_code=#{item_code};
	</select>
	
	<select id="sellDetail" resultType="hashmap">
		SELECT item.*,member.member_nickname 
			FROM item 
				LEFT JOIN member
					ON member.member_id=item.member_id 
			WHERE item_code =#{item_code};
	</select>
	
	
	
	<select id="getAllItem" resultType="hashmap">
		SELECT *
	 		 FROM market_chat_rooms
	</select>
	
	
	<select id="sellCount" resultType="int">
		SELECT count(*)
			FROM item
				WHERE member_id = #{openentId}
	</select>
	
	<select id="isInsertChatRoom" resultType="int">
		SELECT count(*)
			FROM market_chat_rooms
				LEFT JOIN market_chat_messages
						ON market_chat_rooms.room_code = market_chat_messages.room_code
					WHERE 1=1
					  AND market_chat_rooms.item_code = #{item_code}
					  AND (sell_member_id = #{id}
					  OR buy_member_id= #{id})
	</select>
	
	<select id="opponentId" resultType="hashmap">
		SELECT oppenent_id
         FROM (
             SELECT room_code, chat_code, oppenent_id,
                    ROW_NUMBER() OVER (PARTITION BY room_code ORDER BY chat_code DESC) AS row_num
             FROM (
                 SELECT market_chat_rooms.room_code,
                        chat_code,
                        member.member_id AS oppenent_id
           	   		FROM   market_chat_messages
	                      LEFT JOIN member
	                             ON member.member_id = market_chat_messages.sell_member_id
	                      LEFT JOIN market_chat_rooms
	                      		 ON market_chat_rooms.room_code = market_chat_messages.room_code
	                      LEFT JOIN item 
	                      		 ON item.item_code=market_chat_rooms.item_code 
              		 WHERE  buy_member_id = #{ssesion_id}
               UNION
	             SELECT market_chat_rooms.room_code,
	                    chat_code,
	                    member.member_id AS oppenent_id
	             	FROM   market_chat_messages
		                    LEFT JOIN member
		                           ON member.member_id = market_chat_messages.buy_member_id
		                    LEFT JOIN market_chat_rooms
	                      		   ON market_chat_rooms.room_code = market_chat_messages.room_code
                  		   	LEFT JOIN item 
	                      		 ON item.item_code=market_chat_rooms.item_code 
              		 WHERE  sell_member_id = #{ssesion_id}
             	) AS a
         	) AS b
      WHERE row_num = 1 and room_code =#{room_code}
	</select>
	
	<!-- 내채팅목록 -->
	<select id="myChatList" resultType="hashmap">
		SELECT b.room_code, chat_code, chat_content, member_nickname,chat_time,b.item_subject,chat_openDate,item_status
         FROM (
             SELECT room_code, chat_code, chat_content, member_nickname,
                    ROW_NUMBER() OVER (PARTITION BY room_code ORDER BY chat_code DESC) AS row_num , chat_time, a.item_subject ,chat_openDate,item_status
             FROM (
                 SELECT market_chat_rooms.room_code,
                        chat_code,
                        market_chat_rooms.chat_content,
                        member.member_nickname AS member_nickname,
                        chat_time,
                        item.item_subject ,
                        market_chat_rooms.chat_openDate,
                        item.item_status 
           	   		FROM   market_chat_messages
	                      JOIN member
	                             ON member.member_id = market_chat_messages.sell_member_id
	                      JOIN market_chat_rooms
	                      		 ON market_chat_rooms.room_code = market_chat_messages.room_code
	                      JOIN item 
	                      		 ON item.item_code=market_chat_rooms.item_code 
              		 WHERE  buy_member_id = #{id}
               UNION
	             SELECT market_chat_rooms.room_code,
	                    chat_code,
	                    market_chat_rooms.chat_content,
	                    member.member_nickname AS member_nickname,
	                    chat_time,
	                    item.item_subject,
	                    market_chat_rooms.chat_openDate,
	                     item.item_status 
	             	FROM   market_chat_messages
		                    JOIN member
		                           ON member.member_id = market_chat_messages.buy_member_id
		                    JOIN market_chat_rooms
	                      		   ON market_chat_rooms.room_code = market_chat_messages.room_code
                  		   	JOIN item 
	                      		 ON item.item_code=market_chat_rooms.item_code 
              		 WHERE  sell_member_id = #{id}
             	) AS a
         	) AS b
      	WHERE row_num = 1
     		ORDER BY room_code desc
	</select>
	
	<select id="nextRoomCode" resultType="int">
		SELECT room_code + 1
			FROM market_chat_rooms 
				ORDER BY room_code DESC
				 LIMIT 1
	</select>
	
	<!-- 아이템상세정보 -->
	<select id="itemList" resultType="hashmap">
		SELECT *
			 FROM item
		 		WHERE item_code = #{item_code}
	</select>
	
	<insert id="insertMarketPaid">
		<selectKey keyProperty="market_code" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(market_code), 0) FROM market_paid
		</selectKey>
		INSERT 
			INTO market_paid (
				market_code
				, member_id
				, item_code
				, buy_id, sell_id
				, market_price
				, market_pay_type
				, market_date
			)
			VALUES(
			#{market_code} + 1
			, #{item_detail.member_id}
			, #{item_detail.item_code}
			, #{oppenentId}
			, #{item_detail.member_id}
			, #{item_detail.item_price}
			, '직접거래'
			, now()
			)
	
	</insert>
	
	<select id="isUpdate" resultType="int">
		SELECT count(*)
			FROM market_paid
				WHERE 1=1
					AND item_code = #{item_detail} 
	</select>
	
	<delete id="delMarketPaid">
		DELETE 
			FROM market_paid
				WHERE 1=1
					AND item_code=#{item_detail.item_code}
					AND buy_id=#{oppenentId};
	</delete>

	<!-- 채팅상세내용 -->
	<select id="chatDetail" resultType="hashmap">
		SELECT
			market_chat_messages.*,
			market_chat_rooms.chat_openDate,
			chat_mem_id,
			seller.member_nickname as sell_nickname,
			buyer.member_nickname as buy_nickname,
			chat_time,
			item.item_status,
			item.item_subject
		FROM
			market_chat_messages
				LEFT JOIN market_chat_rooms
				  ON
					market_chat_messages.room_code = market_chat_rooms.room_code
				LEFT JOIN member as seller
				  ON
					seller.member_id = market_chat_messages.sell_member_id
				LEFT JOIN member as buyer
				  ON
					buyer.member_id = market_chat_messages.buy_member_id
				LEFT JOIN item 
				  ON
				  	item.item_code = market_chat_rooms.item_code 
		WHERE
			market_chat_messages.room_code = #{room_code}
	</select>

	<!-- 제일마지막에생성된 방 -->
	<select id="chatRecentList" resultType="hashmap">
		SELECT b.room_code, chat_code, chat_content, member_nickname,chat_time,b.item_subject,chat_openDate,item_status
         FROM (
             SELECT room_code, chat_code, chat_content, member_nickname,
                    ROW_NUMBER() OVER (PARTITION BY room_code ORDER BY chat_code DESC) AS row_num , chat_time, a.item_subject ,chat_openDate,item_status
             FROM (
                 SELECT market_chat_rooms.room_code,
                        chat_code,
                        market_chat_rooms.chat_content,
                        member.member_nickname AS member_nickname,
                        chat_time,
                        item.item_subject ,
                        item.item_status,
                        market_chat_rooms.chat_openDate
           	   		FROM   market_chat_messages
	                      LEFT JOIN member
	                             ON member.member_id = market_chat_messages.sell_member_id
	                      LEFT JOIN market_chat_rooms
	                      		 ON market_chat_rooms.room_code = market_chat_messages.room_code
	                      LEFT JOIN item 
	                      		 ON item.item_code=market_chat_rooms.item_code 
              		 WHERE  buy_member_id = #{id}
               UNION
	             SELECT market_chat_rooms.room_code,
	                    chat_code,
	                    market_chat_rooms.chat_content,
	                    member.member_nickname AS member_nickname,
	                    chat_time,
	                    item.item_subject,
	                    item.item_status,
	                    market_chat_rooms.chat_openDate
	             	FROM   market_chat_messages
		                    LEFT JOIN member
		                           ON member.member_id = market_chat_messages.buy_member_id
		                    LEFT JOIN market_chat_rooms
	                      		   ON market_chat_rooms.room_code = market_chat_messages.room_code
                  		   	LEFT JOIN item 
	                      		 ON item.item_code=market_chat_rooms.item_code 
              		 WHERE  sell_member_id = #{id}
             	) AS a
         	) AS b
      	WHERE row_num = 1 
      	ORDER BY room_code DESC LIMIT 1
	</select>
	
	<select id="item_code" resultType="hashmap">
		SELECT item_code
			FROM market_chat_rooms
				WHERE room_code=#{item_code}
	</select>
	
	<update id="updateStatus">
		UPDATE item
			SET
				item_status = #{item_status}
			 WHERE
			 	item_code=#{item_code} 
	</update>
	
	
	
	

	<!-- 마켓 아이템 리스트 05.27 새로 추가한 부분 -->
	<select id="marketItemList" resultType="hashmap">
		SELECT i.*, m.grade_score, im.*
			FROM 
				item i
			LEFT JOIN
				member m
			ON
				i.member_id = m.member_id
			LEFT JOIN 
				images im
			ON
				i.item_code = im.table_code
			WHERE
				1 = 1 
			<if test = 'item_category != null and !item_category.equals("") '>
				AND	i.item_category REGEXP replace(#{item_category}, '/', '|')
			</if>
			<if test = 'item_status != null and !item_status.equals("") '>
				AND	i.item_status = #{item_status}
				AND replace(i.item_price,',','') BETWEEN ${item_price_min} AND ${item_price_max}
			</if>
			<if test = 'member_grade != null and !member_grade.equals("") '>
				AND	m.grade_score >= 50 
			</if>
			<if test = 'member_id != null and !member_id.equals("") '>
				AND ST_Distance_Sphere(
						(SELECT member_location
						 FROM 	member
						 WHERE 	member_id = #{member_id})
						 , member_location) BETWEEN 1 AND 100000
			</if>
		   <choose>
		      <when test='sort.equals("lowPrice")'>
	         	 ORDER BY 	replace(i.item_price,',','')+0 ASC
		      </when> 
		      <when test='sort.equals("highPrice")'>
		        ORDER BY	replace(i.item_price,',','')+0 DESC
		      </when>
		      <when test='sort.equals("highGrade")'>
	      		ORDER BY	m.grade_score DESC
		      </when>
		      <otherwise>
	      		ORDER BY	i.item_code DESC
		   	  </otherwise> 
		   </choose> 
	</select>
	
	 
	<select id="itemDetail" resultType="hashmap">
		SELECT item.*,member.member_nickname 
			FROM item
				LEFT JOIN member 
						ON member.member_id = item.member_id 
			WHERE item_code=#{item_code}
	</select>
	
	<select id="sellId" resultType="hashmap">
		SELECT item.*,member.member_nickname 
			FROM item
				LEFT JOIN member 
						ON member.member_id = item.member_id 
			WHERE item_code=#{item_code}
	</select>
	
	<select id="lastRoomCode" resultType="int">
		SELECT * FROM
			market_chat_rooms
				ORDER BY room_code DESC LIMIT 1 
	</select>
	
<!-- 	마켓 아이템 리스트 05.27 id 넣을려고 주석 처리 -->
<!-- 	<select id="marketItemList" resultType="hashmap"> -->
<!-- 		SELECT i.*, m.grade_score, im.* -->
<!-- 			FROM  -->
<!-- 				item i -->
<!-- 			LEFT JOIN -->
<!-- 				member m -->
<!-- 			ON -->
<!-- 				i.member_id = m.member_id -->
<!-- 			LEFT JOIN  -->
<!-- 				images im -->
<!-- 			ON -->
<!-- 				i.item_code = im.table_code -->
<!-- 			WHERE -->
<!-- 			<choose> -->
<!-- 			<when test = 'item_category eq null or item_category eq ""'> -->
<!-- 				1 = 1 -->
<!-- 			</when> -->
<!-- 			<otherwise> -->
<!-- 				i.item_category REGEXP replace(#{item_category}, '/', '|') -->
<!-- 			</otherwise> -->
<!-- 			</choose> -->
<!-- 			AND -->
<!-- 			<choose> -->
<!-- 			<when test = 'item_status eq null or item_status eq ""'> -->
<!-- 				1 = 1 -->
<!-- 			</when> -->
<!-- 			<otherwise> -->
<!-- 				i.item_status = #{item_status} -->
<!-- 			</otherwise> -->
<!-- 			</choose>	 -->
<!-- 			AND -->
<!-- 				replace(i.item_price,',','') BETWEEN ${item_price_min} AND ${item_price_max} -->
<!-- 			AND -->
<!-- 			<choose> -->
<!-- 			<when test = 'member_grade eq null or member_grade eq ""'> -->
<!-- 				1 = 1 -->
<!-- 			</when> -->
<!-- 			<otherwise> -->
<!-- 				m.grade_score >= 50 -->
<!-- 			</otherwise> -->
<!-- 			</choose>	 -->
<!-- 			ORDER BY -->
<!-- 			   <choose> -->
<!-- 			      <when test='sort.equals("lowPrice")'> -->
<!-- 			           replace(i.item_price,',','')+0 ASC -->
<!-- 			      </when>  -->
<!-- 			      <when test='sort.equals("highPrice")'> -->
<!-- 				      	replace(i.item_price,',','')+0 DESC -->
<!-- 			      </when> -->
<!-- 			      <when test='sort.equals("highGrade")'> -->
<!-- 			      		m.grade_score DESC -->
<!-- 			      </when> -->
<!-- 			      <otherwise> -->
<!-- 			      		i.item_code DESC -->
<!-- 			   	  </otherwise>  -->
<!-- 			   </choose>  -->
<!-- 	</select> -->
	
	<select id="marketItem" resultType="hashmap">
		SELECT i.*, m.*
			FROM 
				item i
			JOIN
				member m
			ON
				i.member_id = m.member_id
			WHERE
				i.item_code = #{item_code}
	</select>
	
	
	<!-- 상품 등록 수정 -->
	<update id="updateItem">
	UPDATE item
	SET
	item_code = #{item_code},
	member_id = #{id},
	item_subject = #{item_subject},
	item_content = #{item_content},
	item_price = #{item_price},
	item_price_offer = #{item_price_offer},
	item_tag = #{item_tag},
	item_category = #{item_category},
	item_status = '판매중',
	item_date = NOW(),
	WHERE item_code = #{item_code};
	</update>
	
	<select id="selectBuyItem" resultType="hashmap">
		SELECT pay.*
				,r.review_code
			FROM 
				market_paid	pay
			LEFT JOIN
				review		r
			ON
				pay.item_code = r.review_item_code
			WHERE
				1 = 1
				AND	pay.buy_id = #{member_id}
				AND	pay.item_code = #{item_code}
	</select>
	
	<insert id="insertReview">
		INSERT INTO
			review
		VALUES	(
			 REPLACE(#{item_code}, 'market', 'review')
			, #{item_code}
			, #{target_id}
			, #{reviewer_id}
			, #{review_content}
			, now()
			, #{rating}
			)
	</insert>
	
	<update id="updateReview">
		UPDATE
			review 
		SET 
			, review_content=#{review_content}
			, rating = #{rating}
		WHERE
			1 = 1
			AND reviewer_id = #{reviewer_id}
			AND	review_item_code = #{item_code}
	</update>
	
	<delete id="deleteReview">
		DELETE		
		FROM
			review
		WHERE
			1=1
			AND reviewer_id = #{reviewer_id}
			AND	review_item_code = #{item_code}
	</delete>
	
<!-- 	채팅방생성 -->
	<insert id="insertChatRoom">
	 INSERT INTO market_chat_rooms
		VALUES(
				  #{roomCode}
				, #{itemCode}
				, #{messages}
				, now()
			)
	</insert>
	<insert id="insertChatMessages">
		<selectKey keyProperty="chat_code" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(chat_code), 0) FROM market_chat_messages
		</selectKey>
			 INSERT INTO market_chat_messages
				VALUES(
						  #{chat_code} + 1
						, #{room_code}
						, #{sellId}
						, #{buyId}
						, #{messages}
						, now()
						, #{myId}
				)
	</insert>
	
	
	<select id="selectItemImage" resultType="hashmap">
		SELECT *
			FROM 
				images
			WHERE 
				table_code = #{item_code}
	</select>
	
	
	<insert id="insertReport">
		<selectKey keyProperty="report_code" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(report_code), 0) FROM report
		</selectKey>
			INSERT 
				INTO 
					report
				VALUES(
						  #{report_code} + 1
						, #{targetId}
						, #{id}
						, #{reportType}
						, #{reportContent}
						, now()
				)
	</insert>
</mapper>
